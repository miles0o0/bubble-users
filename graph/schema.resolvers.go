package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"context"
	"fmt"
	"log"

	"github.com/miles0o0/bubble-users/graph/model"
	"github.com/miles0o0/bubble-users/util"
	"github.com/miles0o0/bubble-users/database"	
)

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, username string, password string) (*model.LoginResponse, error) {
	// Validate input
	if username == "" || password == "" {
		return nil, fmt.Errorf("username and password must not be empty")
	}

	// Use the util.UserLogin function to handle the login
	response, err := util.KeycloakLogin(ctx, username, password)
	if err != nil {
		// Log the error and return it
		log.Printf("Login failed for username: %s, error: %v", username, err)
		return nil, fmt.Errorf("login failed: %w", err)
	}

	// Log successful login
	log.Printf("Login successful for username: %s", username)

	// Return the response
	return response, nil
}

// Refresh is the resolver for the refresh field.
func (r *mutationResolver) Refresh(ctx context.Context, refreshToken string) (*model.LoginResponse, error) {
	if refreshToken == "" {
		return nil, fmt.Errorf("refresh tocken missing")
	}

	return util.KeycloakRefresh(ctx, refreshToken)
}

// Logout is the resolver for the logout field.
func (r *mutationResolver) Logout(ctx context.Context, refreshToken string) (bool, error) {
	if refreshToken == "" {
		return false, fmt.Errorf("refresh token missing")
	}

	return util.KeycloakLogout(ctx, refreshToken)
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, name string, username string, email string) (*model.User, error) {
	user := &model.User{
		Name:     name,
		Username: username,
		Email:    email,
	}
	err := database.(ctx, user) // Save to DB
	if err != nil {
		return nil, err
	}
	return user, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, userID string, name *string, username *string, email *string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: UpdateUser - updateUser"))
}

// AddFriend is the resolver for the addFriend field.
func (r *mutationResolver) AddFriend(ctx context.Context, userID string, friendID string) (*model.User, error) {
	err := database.AddFriend(ctx, userID, friendID) // Save to DB
	if err != nil {
		return nil, err
	}
	return database.GetUserData(ctx, userID) // Return updated user
}

// SetSettings is the resolver for the setSettings field.
func (r *mutationResolver) SetSettings(ctx context.Context, userID string, settings model.SettingsInput) (*model.Settings, error) {
	panic(fmt.Errorf("not implemented: SetSettings - setSettings"))
}

// SendDm is the resolver for the sendDM field.
func (r *mutationResolver) SendDm(ctx context.Context, senderID string, receiverID string, content string) (*model.Message, error) {
	panic(fmt.Errorf("not implemented: SendDm - sendDM"))
}

// GetUserData is the resolver for the getUserData field.
func (r *queryResolver) GetUserData(ctx context.Context, userID string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: GetUserData - getUserData"))
}

// GetFriends is the resolver for the getFriends field.
func (r *queryResolver) GetFriends(ctx context.Context, userID string) ([]*model.User, error) {
	panic(fmt.Errorf("not implemented: GetFriends - getFriends"))
}

// GetDMs is the resolver for the getDMs field.
func (r *queryResolver) GetDMs(ctx context.Context, userID string, friendID *string) ([]*model.Message, error) {
	return util.GetDMs(ctx, userID, friendID)
}

// GetSettings is the resolver for the getSettings field.
func (r *queryResolver) GetSettings(ctx context.Context, userID string) (*model.Settings, error) {
	panic(fmt.Errorf("not implemented: GetSettings - getSettings"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
